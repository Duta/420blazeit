// Generated by CoffeeScript 1.6.3
var Node, Trees, VisualNode, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Node = (function() {
  Node.prototype.data = null;

  Node.prototype.left = null;

  Node.prototype.right = null;

  function Node(data) {
    this.data = data;
  }

  return Node;

})();

VisualNode = (function(_super) {
  __extends(VisualNode, _super);

  function VisualNode() {
    _ref = VisualNode.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VisualNode.diam = 32;

  VisualNode.counter = 0;

  VisualNode.prototype.x = null;

  VisualNode.prototype.y = null;

  VisualNode.prototype.init = function(depth) {
    if (this.data.left !== null) {
      this.left = new VisualNode(this.data.left);
      this.left.init(depth + 1);
    }
    this.x = this.constructor.counter * 20 + 20;
    this.y = depth * 50 + 20;
    this.constructor.counter++;
    if (this.data.right !== null) {
      this.right = new VisualNode(this.data.right);
      return this.right.init(depth + 1);
    }
  };

  VisualNode.prototype.draw = function(ctx) {
    ctx.fillStyle = 'green';
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.constructor.diam / 2, 0, 2 * Math.PI, false);
    ctx.fill();
    ctx.stroke();
    ctx.closePath();
    ctx.font = this.getFont(10);
    ctx.fillStyle = 'black';
    ctx.textAlign = 'center';
    return ctx.fillText(this.data.data, this.x, this.y + 4);
  };

  VisualNode.prototype.getFont = function(size) {
    return size + 'pt Calibri';
  };

  return VisualNode;

})(Node);

Trees = (function() {
  Trees.prototype.canvas = null;

  Trees.prototype.ctx = null;

  Trees.prototype.tickMs = 33;

  Trees.prototype.width = 640;

  Trees.prototype.height = 480;

  Trees.prototype.root = null;

  function Trees() {
    var root;
    this.canvas = document.getElementById('treescanvas');
    this.width = this.canvas.width;
    this.height = this.canvas.height;
    this.ctx = this.canvas.getContext('2d');
    root = new Node(637);
    root.left = new Node(72);
    root.right = new Node(903);
    root.left.left = new Node(8);
    root.left.right = new Node(95);
    root.right.left = new Node(750);
    root.right.right = new Node(5000);
    this.root = new VisualNode(root);
    this.root.init(0);
    this.draw();
  }

  Trees.prototype.draw = function() {
    this.clear();
    this.ctx.lineWidth = 1;
    this.drawLink(this.root);
    return this.drawNode(this.root);
  };

  Trees.prototype.drawLink = function(node) {
    if (node === null) {
      return;
    }
    if (node.left !== null) {
      this.drawLine('black', node.x, node.y, node.left.x, node.left.y);
      this.drawLink(node.left);
    }
    if (node.right !== null) {
      this.drawLine('black', node.x, node.y, node.right.x, node.right.y);
      return this.drawLink(node.right);
    }
  };

  Trees.prototype.drawNode = function(node) {
    if (node === null) {
      return;
    }
    this.drawNode(node.left);
    node.draw(this.ctx);
    return this.drawNode(node.right);
  };

  Trees.prototype.drawLine = function(color, x1, y1, x2, y2) {
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    this.ctx.stroke();
    return this.ctx.closePath();
  };

  Trees.prototype.clear = function() {
    this.ctx.fillStyle = 'white';
    return this.ctx.fillRect(0, 0, this.width, this.height);
  };

  return Trees;

})();

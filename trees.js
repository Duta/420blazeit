// Generated by CoffeeScript 1.6.3
var Node, Trees, VisualNode, update, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

({
  getById: document.getElementById
});

Node = (function() {
  Node.prototype.data = null;

  Node.prototype.left = null;

  Node.prototype.right = null;

  function Node(data) {
    this.data = data;
  }

  return Node;

})();

VisualNode = (function(_super) {
  __extends(VisualNode, _super);

  function VisualNode() {
    _ref = VisualNode.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VisualNode.diam = 32;

  VisualNode.nodeColor = null;

  VisualNode.lineColor = null;

  VisualNode.textColor = null;

  VisualNode.margin = 20;

  VisualNode.counter = 0;

  VisualNode.prototype.x = null;

  VisualNode.prototype.y = null;

  VisualNode.prototype.init = function(depth) {
    if (this.data.left !== null) {
      this.left = new VisualNode(this.data.left);
      this.left.init(depth + 1);
    }
    this.x = this.constructor.counter * 20 + this.constructor.margin;
    this.y = depth * 50 + this.constructor.margin;
    this.constructor.counter++;
    if (this.data.right !== null) {
      this.right = new VisualNode(this.data.right);
      return this.right.init(depth + 1);
    }
  };

  VisualNode.prototype.draw = function(ctx) {
    this.drawCircle(ctx);
    return this.drawText(ctx);
  };

  VisualNode.prototype.drawCircle = function(ctx) {
    ctx.fillStyle = this.constructor.nodeColor;
    ctx.strokeStyle = this.constructor.lineColor;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.constructor.diam / 2, 0, 2 * Math.PI, false);
    ctx.fill();
    ctx.stroke();
    return ctx.closePath();
  };

  VisualNode.prototype.drawText = function(ctx) {
    ctx.font = this.getFont(10);
    ctx.fillStyle = this.constructor.textColor;
    ctx.textAlign = 'center';
    return ctx.fillText(this.data.data, this.x, this.y + 4);
  };

  VisualNode.prototype.getFont = function(size) {
    return size + 'pt Calibri';
  };

  return VisualNode;

})(Node);

Trees = (function() {
  Trees.bgColor = null;

  Trees.lineColor = null;

  Trees.prototype.canvas = null;

  Trees.prototype.ctx = null;

  Trees.prototype.root = null;

  Trees.prototype.tickMs = 33;

  Trees.prototype.width = 400;

  Trees.prototype.height = 250;

  function Trees() {
    this.canvas = document.getElementById('treescanvas');
    this.restoreSize();
    this.ctx = this.canvas.getContext('2d');
    this.clear();
  }

  Trees.prototype.draw = function() {
    this.resize();
    this.clear();
    this.ctx.lineWidth = 1;
    this.drawLink(this.root);
    return this.drawNode(this.root);
  };

  Trees.prototype.save = function() {
    return this.canvas.toBlob(function(blob) {
      return saveAs(blob, 'tree.png');
    });
  };

  Trees.prototype.drawLink = function(node) {
    if (node === null) {
      return;
    }
    if (node.left !== null) {
      this.drawLine(this.constructor.lineColor, node.x, node.y, node.left.x, node.left.y);
      this.drawLink(node.left);
    }
    if (node.right !== null) {
      this.drawLine(this.constructor.lineColor, node.x, node.y, node.right.x, node.right.y);
      return this.drawLink(node.right);
    }
  };

  Trees.prototype.drawNode = function(node) {
    if (node === null) {
      return;
    }
    this.drawNode(node.left);
    node.draw(this.ctx);
    return this.drawNode(node.right);
  };

  Trees.prototype.drawLine = function(color, x1, y1, x2, y2) {
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    this.ctx.stroke();
    return this.ctx.closePath();
  };

  Trees.prototype.clear = function() {
    this.ctx.fillStyle = this.constructor.bgColor;
    return this.ctx.fillRect(0, 0, this.width, this.height);
  };

  Trees.prototype.restoreSize = function() {
    this.canvas.width = this.width;
    return this.canvas.height = this.height;
  };

  Trees.prototype.resize = function() {
    this.canvas.width = this.getMaxX() + VisualNode.margin;
    return this.canvas.height = this.getMaxY() + VisualNode.margin;
  };

  Trees.prototype.getMaxX = function() {
    var node;
    node = this.root;
    while (node.right !== null) {
      node = node.right;
    }
    return node.x;
  };

  Trees.prototype.getMaxY = function() {
    var helper;
    helper = function(node, maxY) {
      maxY = Math.max(maxY, node.y);
      if (node.left !== null) {
        maxY = Math.max(maxY, helper(node.left, maxY));
      }
      if (node.right !== null) {
        maxY = Math.max(maxY, helper(node.right, maxY));
      }
      return maxY;
    };
    return helper(this.root, 0);
  };

  Trees.prototype.parse = function(str) {
    var ch, end, i, leftText, len, numLeftParens, numRightParens, rightText, root, rootText, start, _i;
    len = str.length;
    numLeftParens = 0;
    numRightParens = 0;
    for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
      ch = str.charAt(i);
      if (ch === '(') {
        numLeftParens++;
      } else if (ch === ')') {
        numRightParens++;
      } else if (numLeftParens === numRightParens) {
        start = i;
        while (ch !== '(' && ch !== ')' && i < len) {
          ch = str.charAt(++i);
        }
        end = i;
        rootText = str.substring(start, end);
        root = new Node(rootText);
        if (start !== 0 && end !== len) {
          leftText = str.substring(1, start - 1);
          rightText = str.substring(end + 1, len - 1);
          root.left = this.parse(leftText);
          root.right = this.parse(rightText);
        }
        return root;
      }
    }
    return null;
  };

  Trees.prototype.update = function(input) {
    var root;
    VisualNode.counter = 0;
    input = input.replace(/\s/g, '');
    root = this.parse(input);
    if (root === null) {
      this.root = null;
    } else {
      this.root = new VisualNode(root);
      this.root.init(0);
    }
    return this.draw();
  };

  return Trees;

})();

update = function(trees) {
  var inputField;
  inputField = document.getElementById('inputfield');
  return trees.update(inputField.value);
};

window.onload = function() {
  var bgColorPicker, lineColorPicker, nodeColorPicker, textColorPicker, trees;
  trees = new Trees;
  document.getElementById('updatebutton').onclick = function() {
    return update(trees);
  };
  document.getElementById('savebutton').onclick = function() {
    return trees.save();
  };
  textColorPicker = document.getElementById('textcolor');
  nodeColorPicker = document.getElementById('nodecolor');
  lineColorPicker = document.getElementById('linecolor');
  bgColorPicker = document.getElementById('bgcolor');
  textColorPicker.onchange = function() {
    VisualNode.textColor = '#' + this.color;
    return update(trees);
  };
  nodeColorPicker.onchange = function() {
    VisualNode.nodeColor = '#' + this.color;
    return update(trees);
  };
  lineColorPicker.onchange = function() {
    VisualNode.lineColor = '#' + this.color;
    Trees.lineColor = '#' + this.color;
    return update(trees);
  };
  bgColorPicker.onchange = function() {
    Trees.bgColor = '#' + this.color;
    return update(trees);
  };
  textColorPicker.color.fromString('66180c');
  nodeColorPicker.color.fromString('4dff7c');
  lineColorPicker.color.fromString('31571b');
  bgColorPicker.color.fromString('52b4ff');
  textColorPicker.onchange();
  nodeColorPicker.onchange();
  lineColorPicker.onchange();
  return bgColorPicker.onchange();
};
